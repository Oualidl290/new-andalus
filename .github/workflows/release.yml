name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  pull-requests: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          else
            # Generate changelog from commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in ${{ github.ref_name }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            
            ```bash
            # Pull the latest release
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            
            # Or use latest
            docker pull ghcr.io/${{ github.repository }}:latest
            ```
            
            ## Quick Start
            
            ```bash
            git clone https://github.com/${{ github.repository }}.git
            cd new-andalus
            git checkout ${{ github.ref_name }}
            ./setup.sh
            ```
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  # Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Security scan for release
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging (if you have staging environment)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc')
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying ${{ github.ref_name }} to staging environment"
          # Add your staging deployment commands here
          # kubectl apply -f kubernetes/staging/
          # or docker-compose -f docker-compose.staging.yml up -d

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: "!contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc')"
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying ${{ github.ref_name }} to production environment"
          # Add your production deployment commands here
          # kubectl apply -f kubernetes/production/
          # or your deployment script